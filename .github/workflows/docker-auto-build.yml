name: 自动构建 ystrm 镜像到 GHCR

# 触发条件：推送到 main 分支或 PR 合并
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push-ghcr:
    runs-on: ubuntu-latest
    permissions:
      # 关键：授予 Actions 推送镜像到 GHCR 的权限
      packages: write
      contents: read  # 读取仓库代码的权限
    steps:
      # 步骤1：拉取 GitHub 仓库代码
      - name: 检查代码
        uses: actions/checkout@v4

      # 步骤2：设置 Docker Buildx（构建多平台镜像）
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤3：登录 GHCR（无需手动设置 Secrets，GitHub 自动生成 GITHUB_TOKEN）
      - name: 登录 GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'  # PR 时只构建不推送
        uses: docker/login-action@v3
        with:
          registry: ghcr.io  # GHCR 固定域名
          username: ${{ github.actor }}  # 自动获取当前 GitHub 用户名（如你的账号名）
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub 内置令牌，无需手动配置

      # 步骤4：提取镜像标签（适配 GHCR 格式）
      - name: 提取 GHCR 镜像标签
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            # GHCR 镜像名格式：ghcr.io/<GitHub用户名>/<镜像名>
            ghcr.io/${{ github.actor }}/ystrm
          tags: |
            latest  # 稳定版标签
            ${{ github.sha }}  # 用 commit 哈希标签（便于回滚）
          # 可选：设置镜像为公开（默认私有，如需公开需加此配置）
          flavor: |
            latest=true

      # 步骤5：构建并推送镜像到 GHCR
      - name: 构建并推送 ystrm 到 GHCR
        uses: docker/build-push-action@v5
        with:
          context: .  # 构建上下文（仓库根目录）
          file: ./Dockerfile  # Dockerfile 路径
          push: ${{ github.event_name != 'pull_request' }}  # PR 只构建不推送
          tags: ${{ steps.meta.outputs.tags }}  # GHCR 镜像标签
          labels: ${{ steps.meta.outputs.labels }}  # 自动生成镜像元数据
          platforms: linux/amd64  # 构建平台（如需 ARM 加 linux/arm64）
          cache-from: type=gha  # 缓存加速构建
          cache-to: type=gha,mode=max  # 保存缓存
